* 依赖注入
** resource
https://python-dependency-injector.ets-labs.org/index.html
https://www.netguru.com/blog/dependency-injection-with-python-make-it-easy
https://www.netguru.com/blog/test-driven-development
https://www.netguru.com/blog/top-python-testing-frameworks
https://testdriven.io/blog/python-dependency-injection/




依赖注入是一种设计模式，这种模式使得一个对象可以接受另一个对象，开始在静态语言中比较流行，可以提升静态语
言的灵活性。python作为一种动态语言，本身提供了很大的灵活性，因此有人认为其对python的意义不大。也有人认为
python编程人员很少使用依赖注入框架，因为可以轻松的使用语言基础实现。

什么是依赖注入？

<img src="https://python-dependency-injector.ets-labs.org/_images/coupling-cohesion.png" alt="../_images/coupling-cohesion.png"/>

依赖注入是一种降低耦合增加内聚的设计模式。在依赖注入中对象不再相互进行创建，而是使用一种方式注入这个依赖。
之前有依赖的写法如下：

#+BEGIN_SRC python
import os

class ApiClient:
    def __init__(self) -> None:
        self.api_key = os.getenv("API_KEY")  # <-- dependency
        self.timeout = int(os.getenv("TIMEOUT"))  # <-- dependency

class Service:
    def __init__(self) -> None:
        self.api_client = ApiClient()  # <-- dependency

def main() -> None:
    service = Service()  # <-- dependency
    ...

if __name__ == "__main__":
    main()
#+END_SRC

service类依赖其他类的对象，因此需要在类内部进行创建。使用依赖注入之后写法如下：
#+BEGIN_SRC python
import os

class ApiClient:
    def __init__(self, api_key: str, timeout: int) -> None:
        self.api_key = api_key  # <-- dependency is injected
        self.timeout = timeout  # <-- dependency is injected

class Service:
    def __init__(self, api_client: ApiClient) -> None:
        self.api_client = api_client  # <-- dependency is injected

def main(service: Service) -> None:  # <-- dependency is injected
    ...

if __name__ == "__main__":
    main(
        service=Service(
            api_client=ApiClient(
                api_key=os.getenv("API_KEY"),
                timeout=int(os.getenv("TIMEOUT")),
            ),
        ),
    )
#+END_SRC
api_key被解耦出来不需要知道api-key来自于哪里。apiclient和service也被解耦出来。

灵活性所带来的代价是嵌入代码更加复杂。

python下可以使用depengency injector，这个框架提供了一种依赖注入模式，对象不再承担收集依赖的责任。由
dependency injector来承担这个责任。依赖注入器框架来承担嵌入和收集依赖。依赖注入器框架提供了~container~
和~provider~处理依赖的收集，在需要对象时，放一个~provider~ maker作为函数参数的默认值。调用参数时，
框架会收集和嵌入依赖。

#+BEGIN_SRC python
from dependency_injector import containers, providers
from dependency_injector.wiring import Provide, inject

class Container(containers.DeclarativeContainer):
    config = providers.Configuration()
    api_client = providers.Singleton(
        ApiClient,
        api_key=config.api_key,
        timeout=config.timeout,
    )
    service = providers.Factory(
        Service,
        api_client=api_client,
    )

@inject
def main(service: Service = Provide[Container.service]) -> None:
    ...

if __name__ == "__main__":
    container = Container()
    container.config.api_key.from_env("API_KEY", required=True)
    container.config.timeout.from_env("TIMEOUT", as_=int, default=5)
    container.wire(modules=[__name__])

    main()  # <-- dependency is injected automatically

    with container.api_client.override(mock.Mock()):
        main()  # <-- overridden dependency is injected automatically
#+END_SRC

 在调用~main()~函数时，~Service~依赖会被自动收集和嵌入。

在进行测试的时候，调用~container.api_client.override()~方法用一个假的来替代真正的API client.在调用main()时就会注入zhege 假的。

可以使用另一个provider覆盖任何一个provider.

在为不同的环境重新配置项目时也可以这样用:在dev或stage时使用一个stub替代api client.

对象嵌入在容器里进行结合，依赖注入被显式的进行定义。可以更简单的理解和改变应用的工作方式。

** Testing, Monkey-patching and dependency injection

testability与mokey-patching的有点相反。在python中可以monkey-patch任何东西，任何时候.monkey-patch的问题时太过脆弱。问题是
在进行monkey-patch的时候会进行违反代码本意的事情。monkey-patch实现细节，当实现改变的时候，monkey-patch就会失效。

使用依赖注入，可以对接口进行patch,而不是实现，这是更稳定的方法。

monkey-patch在测试代码之外重新为不同环境重新配置项目太过dirty.

总之，依赖注入有三个有点：
- 灵活性，组件之间耦合性低，可以通过不同方式不同组件轻松更改系统的功能。
- 容易测试，可以轻松的注入mocks而不是使用api 功能。
- 清晰易于维护，依赖注入可以暴露依赖，隐式的变成显式的，在容器中可以明确的定义各种组件和依赖，轻松控制程序结构，更容易理解。

如果使用python,依赖注入的优点没有那么大，程序越大，优点越大。仍然建议使用依赖注入框架。

